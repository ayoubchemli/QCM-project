[
    {
      "chapter_id": 0,
      "title": "SQL Basics",
      "description": "Test your knowledge of SQL fundamentals, including queries, joins, and basic database operations.",
      "questions_count": 10,
      "time_estimate": "20 mins",
      "difficulty": "Intermediate",
      "is_new": true,
      "questions": [
        {
          "question": "Which SQL statement is used to retrieve data from a database?",
          "answers": [
            "SELECT",
            "INSERT",
            "UPDATE",
            "DELETE"
          ],
          "correctAnswer": 0,
          "explanation": "The SELECT statement is the fundamental SQL command used to retrieve data from one or more database tables. It allows you to specify exactly which columns you want to retrieve, filter the results using WHERE clauses, and sort or group the data as needed. Unlike INSERT, UPDATE, or DELETE, SELECT doesn't modify the data - it only reads and returns it."
        },
        {
          "question": "Which clause is used to filter records in an SQL query?",
          "answers": [
            "WHERE",
            "ORDER BY",
            "GROUP BY",
            "HAVING"
          ],
          "correctAnswer": 0,
          "explanation": "The WHERE clause is used to filter records based on specified conditions before they are included in the query results. It acts as a row-level filter, allowing you to retrieve only the records that match certain criteria. Unlike ORDER BY (which sorts results) or GROUP BY (which groups results), WHERE determines which rows are included in the result set."
        },
        {
          "question": "Which SQL statement is used to insert new records into a table?",
          "answers": [
            "INSERT INTO",
            "SELECT INTO",
            "UPDATE",
            "DELETE"
          ],
          "correctAnswer": 0,
          "explanation": "INSERT INTO is the SQL command used to add new records to a table. It can be used to insert a single row or multiple rows at once. The command requires specifying the table name and the values to be inserted, ensuring they match the table's structure and data types. Unlike UPDATE which modifies existing records, INSERT INTO creates new records."
        },
        {
          "question": "What does the SQL 'JOIN' operation do?",
          "answers": [
            "Combines rows from two or more tables based on a related column",
            "Adds new columns to an existing table",
            "Removes rows from a table",
            "Updates the values of columns in a table"
          ],
          "correctAnswer": 0,
          "explanation": "A JOIN operation combines rows from two or more tables based on a related column between them. This is fundamental to relational databases as it allows you to retrieve data from multiple tables in a single query. The common types include INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN, each serving different purposes in data retrieval."
        },
        {
          "question": "Which of the following is used to define a primary key in SQL?",
          "answers": [
            "PRIMARY KEY",
            "AUTO_INCREMENT",
            "FOREIGN KEY",
            "INDEX"
          ],
          "correctAnswer": 0,
          "explanation": "The PRIMARY KEY constraint uniquely identifies each record in a table. It automatically creates an index, ensures uniqueness, and cannot contain NULL values. While AUTO_INCREMENT generates sequential values and INDEX improves query performance, only PRIMARY KEY establishes the main identifier for table records."
        },
        {
          "question": "Which SQL command is used to remove a table from a database?",
          "answers": [
            "DROP",
            "DELETE",
            "REMOVE",
            "TRUNCATE"
          ],
          "correctAnswer": 0,
          "explanation": "The DROP command is used to completely remove a table structure and all its data from the database. Unlike DELETE which removes records but keeps the table structure, or TRUNCATE which removes all records but keeps the table structure, DROP completely eliminates the table definition and all its data."
        },
        {
          "question": "What is the purpose of the SQL 'ORDER BY' clause?",
          "answers": [
            "Sort the results of a query",
            "Filter the results of a query",
            "Group the results of a query",
            "Join tables"
          ],
          "correctAnswer": 0,
          "explanation": "ORDER BY is used to sort the result set of a query in either ascending (ASC) or descending (DESC) order. It can sort by one or multiple columns and is typically the last clause in a SELECT statement. Unlike WHERE which filters data or GROUP BY which aggregates data, ORDER BY determines the sequence of the results."
        },
        {
          "question": "Which of the following is used to change the structure of an existing SQL table?",
          "answers": [
            "ALTER TABLE",
            "MODIFY TABLE",
            "UPDATE TABLE",
            "CHANGE TABLE"
          ],
          "correctAnswer": 0,
          "explanation": "ALTER TABLE is the SQL command used to modify the structure of an existing table. It can be used to add, modify, or delete columns, change data types, add or remove constraints, and more. Unlike UPDATE which modifies data within the table, ALTER TABLE changes the table's structure itself."
        },
        {
          "question": "Which data type is used to store text in SQL?",
          "answers": [
            "VARCHAR",
            "INT",
            "DATE",
            "BOOLEAN"
          ],
          "correctAnswer": 0,
          "explanation": "VARCHAR is a variable-length string data type used to store text in SQL databases. It's more space-efficient than CHAR as it only uses as much space as needed for the stored text (up to its defined maximum). Unlike INT (for numbers), DATE (for dates), or BOOLEAN (for true/false), VARCHAR is specifically designed for text storage."
        },
        {
          "question": "Which SQL function is used to count the number of rows in a table?",
          "answers": [
            "COUNT()",
            "SUM()",
            "AVG()",
            "MAX()"
          ],
          "correctAnswer": 0,
          "explanation": "COUNT() is an aggregate function that returns the number of rows in a table or the number of rows that match a specific condition. Unlike SUM() which adds numeric values, or AVG() which calculates averages, COUNT() is specifically used for counting rows or non-null values in a column."
        }
      ]
    },
    {
      "chapter_id": 1,
      "title": "Database Design",
      "description": "Test your understanding of designing efficient and normalized databases, including relationships and schemas.",
      "questions_count": 12,
      "time_estimate": "25 mins",
      "difficulty": "Advanced",
      "is_new": true,
      "questions": [
        {
          "question": "What does database normalization primarily aim to achieve?",
          "answers": [
            "Reduce redundancy and dependency",
            "Increase data retrieval speed",
            "Improve data security",
            "Reduce table size"
          ],
          "correctAnswer": 0,
          "explanation": "Database normalization primarily aims to reduce data redundancy and dependency by organizing data efficiently. This process helps maintain data integrity by eliminating duplicate data and ensuring that data dependencies make logical sense. While it may impact retrieval speed and table size, its main purpose is to create a logical, maintainable database structure."
        },
        {
          "question": "Which normal form eliminates transitive dependency?",
          "answers": [
            "Third Normal Form (3NF)",
            "Second Normal Form (2NF)",
            "Boyce-Codd Normal Form (BCNF)",
            "First Normal Form (1NF)"
          ],
          "correctAnswer": 0,
          "explanation": "Third Normal Form (3NF) eliminates transitive dependencies, where a non-key attribute depends on another non-key attribute. This is a step beyond 2NF, which eliminates partial dependencies, and 1NF, which ensures atomicity. 3NF helps ensure that every non-key attribute is directly dependent only on the primary key."
        },
        {
          "question": "In a relational database, what is a 'foreign key'?",
          "answers": [
            "A column that links to the primary key of another table",
            "A unique identifier for each record",
            "A column that stores unique values",
            "A column that stores date values"
          ],
          "correctAnswer": 0,
          "explanation": "A foreign key is a column or combination of columns that creates a link between data in two tables. It references the primary key of another table, establishing relationships and maintaining referential integrity in a relational database. This mechanism is crucial for creating relationships between tables and ensuring data consistency."
        },
        {
          "question": "What is a schema in a relational database?",
          "answers": [
            "The structure that defines the organization of data",
            "A collection of related records",
            "A table that stores metadata",
            "A set of stored procedures"
          ],
          "correctAnswer": 0,
          "explanation": "A database schema is the logical organization and structure of the database. It includes the definitions of tables, fields, relationships, views, indexes, and constraints. Think of it as the blueprint that defines how data is organized and how the relations among them are associated."
        },
        {
          "question": "Which of the following is a type of relationship in a database?",
          "answers": [
            "One-to-many",
            "Many-to-many",
            "One-to-one",
            "All of the above"
          ],
          "correctAnswer": 3,
          "explanation": "All three types of relationships (one-to-one, one-to-many, and many-to-many) are valid database relationships. Each serves different purposes: one-to-one for unique associations, one-to-many for hierarchical relationships, and many-to-many for complex relationships requiring junction tables."
        },
        {
          "question": "Which of the following is a feature of a 'many-to-many' relationship?",
          "answers": [
            "Requires a junction table to implement",
            "Involves only one table",
            "Is always redundant",
            "Cannot be implemented in SQL"
          ],
          "correctAnswer": 0,
          "explanation": "A many-to-many relationship requires a junction (or bridge) table to be properly implemented in a relational database. This table contains foreign keys from both related tables, allowing multiple records from each table to be related to multiple records in the other table without creating data redundancy."
        },
        {
          "question": "What is the purpose of indexing in a database?",
          "answers": [
            "To speed up data retrieval operations",
            "To ensure data integrity",
            "To store backup copies of data",
            "To restrict user access to data"
          ],
          "correctAnswer": 0,
          "explanation": "Indexing is primarily used to speed up data retrieval operations by creating data structures that allow the database engine to locate specific rows quickly without scanning the entire table. While indexes require additional storage space and maintenance overhead, they significantly improve query performance for large datasets."
        },
        {
          "question": "Which of the following is true about a primary key?",
          "answers": [
            "It uniquely identifies each record in a table",
            "It can contain NULL values",
            "It is used to link tables together",
            "It is not mandatory in every table"
          ],
          "correctAnswer": 0,
          "explanation": "A primary key uniquely identifies each record in a table and cannot contain NULL values. It ensures data integrity by preventing duplicate records and providing a reliable way to reference specific rows. While it can be used to link tables (as a foreign key in other tables), that's not its primary purpose."
        },
        {
          "question": "Which of the following is a valid SQL join type?",
          "answers": [
            "INNER JOIN",
            "LEFT JOIN",
            "RIGHT JOIN",
            "All of the above"
          ],
          "correctAnswer": 3,
          "explanation": "All of these are valid SQL join types. INNER JOIN returns matching records from both tables, LEFT JOIN returns all records from the left table and matching records from the right table, and RIGHT JOIN returns all records from the right table and matching records from the left table. Each type serves different purposes in data retrieval."
        },
        {
          "question": "In a database, what is a 'transaction'?",
          "answers": [
            "A sequence of operations that are executed as a single unit",
            "A type of database query",
            "A backup of data",
            "A method for storing large data"
          ],
          "correctAnswer": 0,
          "explanation": "A transaction is a logical unit of work that must be completed in its entirety to maintain data integrity. It follows the ACID properties (Atomicity, Consistency, Isolation, Durability), ensuring that either all operations within the transaction are completed successfully, or none are applied if any operation fails."
        },
        {
          "question": "Which of the following ensures that a database transaction is reliable and consistent?",
          "answers": [
            "ACID properties",
            "Data redundancy",
            "SQL constraints",
            "Data normalization"
          ],
          "correctAnswer": 0,
          "explanation": "ACID properties (Atomicity, Consistency, Isolation, Durability) ensure transaction reliability and consistency. These properties guarantee that transactions are processed reliably, maintain database consistency, operate independently of other transactions, and persist once committed."
        },
        {
          "question": "Which normalization form eliminates partial dependency?",
          "answers": [
            "Second Normal Form (2NF)",
            "First Normal Form (1NF)",
            "Third Normal Form (3NF)",
            "Boyce-Codd Normal Form (BCNF)"
          ],
          "correctAnswer": 2,
          "explanation": "Second Normal Form (2NF) eliminates partial dependencies by ensuring that all non-key attributes are fully functionally dependent on the entire primary key. This is particularly important in tables with composite primary keys, where some attributes might depend on only part of the key."
        }
      ]
    },
   
      
     
    {
        "chapter_id": 2,
        "title": "NoSQL Databases",
        "description": "Test your knowledge of NoSQL databases, including key concepts like document, column-family, graph, and key-value stores.",
        "questions_count": 12,
        "time_estimate": "25 mins",
        "difficulty": "Advanced",
        "is_new": true,
        "questions": [
            {
                "question": "Which of the following is a NoSQL database type?",
                "answers": [
                    "Document store",
                    "Relational database",
                    "Columnar store",
                    "Graph database"
                ],
                "correctAnswer": 0,
                "explanation": "Document stores like MongoDB are one of the main types of NoSQL databases. While columnar stores and graph databases are also NoSQL types, the specific option 'Document store' is the correct answer here. Relational databases are traditional SQL databases, not NoSQL."
            },
            {
                "question": "Which NoSQL database is known for storing data in key-value pairs?",
                "answers": [
                    "Redis",
                    "MongoDB",
                    "Cassandra",
                    "Neo4j"
                ],
                "correctAnswer": 0,
                "explanation": "Redis is a popular key-value store NoSQL database. It excels at storing simple data structures where each value is associated with a unique key. MongoDB is a document store, Cassandra is a column-family store, and Neo4j is a graph database."
            },
            {
                "question": "Which of the following is a key feature of a document-based NoSQL database?",
                "answers": [
                    "Data is stored in JSON or BSON format",
                    "Data is stored in tables with rows and columns",
                    "Uses SQL for querying",
                    "Stores data in graph format"
                ],
                "correctAnswer": 0,
                "explanation": "Document-based NoSQL databases like MongoDB store data in JSON (JavaScript Object Notation) or BSON (Binary JSON) format. This allows for flexible schema design and nested data structures, unlike traditional relational databases that use tables with fixed schemas."
            },
            {
                "question": "What is the main use case for a graph database?",
                "answers": [
                    "Storing interconnected data",
                    "Storing large amounts of tabular data",
                    "Handling massive amounts of time-series data",
                    "Managing high-velocity transactional data"
                ],
                "correctAnswer": 0,
                "explanation": "Graph databases are specifically designed for handling highly interconnected data, making them ideal for use cases like social networks, recommendation engines, and network analysis. They excel at managing and querying relationships between data points."
            },
            {
                "question": "Which of the following NoSQL databases is best known for horizontal scalability?",
                "answers": [
                    "Cassandra",
                    "MongoDB",
                    "SQLite",
                    "PostgreSQL"
                ],
                "correctAnswer": 0,
                "explanation": "Cassandra is particularly well-known for its excellent horizontal scalability. It was designed by Facebook (now Meta) to handle massive amounts of data across multiple nodes with no single point of failure. SQLite and PostgreSQL are relational databases, not NoSQL."
            },
            {
                "question": "Which of the following is a feature of column-family NoSQL databases?",
                "answers": [
                    "Data is stored in columns rather than rows",
                    "Data is organized into key-value pairs",
                    "Uses SQL-like queries",
                    "Stores data in hierarchical tree structures"
                ],
                "correctAnswer": 0,
                "explanation": "Column-family databases like Cassandra store data in columns rather than rows, which makes them efficient for reading and writing specific columns of data. This organization is particularly useful for analytics and data warehousing applications."
            },
            {
                "question": "Which of the following is an example of a graph-based NoSQL database?",
                "answers": [
                    "Neo4j",
                    "Cassandra",
                    "MongoDB",
                    "HBase"
                ],
                "correctAnswer": 0,
                "explanation": "Neo4j is the most popular graph database. It's specifically designed to store and query graph-structured data with nodes, relationships, and properties. The other options are different types of NoSQL databases: Cassandra (column-family), MongoDB (document), and HBase (column-family)."
            },
            {
                "question": "What is a key advantage of NoSQL databases over traditional relational databases?",
                "answers": [
                    "Ability to handle unstructured data",
                    "Strict consistency",
                    "SQL support",
                    "Transactions and ACID properties"
                ],
                "correctAnswer": 0,
                "explanation": "NoSQL databases excel at handling unstructured and semi-structured data due to their flexible schema design. Traditional relational databases require predefined schemas and are less suitable for unstructured data. While some NoSQL databases support ACID properties, this is traditionally a strength of relational databases."
            },
            {
                "question": "Which NoSQL database is commonly used for real-time analytics and can scale horizontally?",
                "answers": [
                    "Cassandra",
                    "PostgreSQL",
                    "Oracle",
                    "MySQL"
                ],
                "correctAnswer": 0,
                "explanation": "Cassandra is widely used for real-time analytics due to its ability to handle high write throughput and scale horizontally across multiple nodes. PostgreSQL, Oracle, and MySQL are traditional relational databases that have different scaling characteristics."
            },
            {
                "question": "What is a feature of a key-value store?",
                "answers": [
                    "Data is stored in pairs of keys and values",
                    "Uses a relational model for data",
                    "Supports SQL queries",
                    "Data is stored in tables with rows and columns"
                ],
                "correctAnswer": 1,
                "explanation": "Key-value stores like Redis store data as pairs of keys and values, where each key must be unique. This simple data model allows for very fast read and write operations, making key-value stores ideal for caching and session management."
            },
            {
                "question": "Which NoSQL database is known for its document-oriented approach?",
                "answers": [
                    "MongoDB",
                    "Cassandra",
                    "HBase",
                    "PostgreSQL"
                ],
                "correctAnswer": 0,
                "explanation": "MongoDB is the most popular document-oriented NoSQL database. It stores data in BSON format, allowing for flexible schema design and easy storage of complex, nested data structures. This makes it particularly suitable for applications with evolving data requirements."
            },
            {
                "question": "Which of the following is true about NoSQL databases?",
                "answers": [
                    "They are typically used for large-scale, distributed data",
                    "They only support SQL queries",
                    "They do not support high availability",
                    "They cannot scale horizontally"
                ],
                "correctAnswer": 0,
                "explanation": "NoSQL databases are designed for handling large-scale, distributed data systems. They often sacrifice some ACID properties in favor of scalability and performance, making them well-suited for big data applications and systems that need to handle large amounts of data across multiple servers."
            }
        ]
    },
    
    {
        "chapter_id": 3,
        "title": "Database Optimization",
        "description": "Test your understanding of optimizing database performance, including indexing, query optimization, and caching techniques.",
        "questions_count": 10,
        "time_estimate": "20 mins",
        "difficulty": "Advanced",
        "is_new": true,
        "questions": [
            {
                "question": "What is the primary purpose of database indexing?",
                "answers": [
                    "To speed up data retrieval",
                    "To normalize data",
                    "To encrypt data",
                    "To create backups"
                ],
                "correctAnswer": 0,
                "explanation": "Database indexing is primarily used to speed up data retrieval operations. It creates a data structure that allows the database engine to locate specific rows quickly without having to scan the entire table, similar to how an index in a book helps you find specific topics quickly."
            },
            {
                "question": "Which of the following query optimizations can improve performance?",
                "answers": [
                    "Using JOINs instead of subqueries",
                    "Avoiding SELECT * in queries",
                    "Using indexes on frequently queried columns",
                    "All of the above"
                ],
                "correctAnswer": 3,
                "explanation": "All these techniques improve query performance. JOINs are often more efficient than subqueries, avoiding SELECT * reduces unnecessary data retrieval, and proper indexing speeds up data access. Together, these practices form the foundation of query optimization."
            },
            {
                "question": "Which of the following indexing techniques is best for improving search performance on large text columns?",
                "answers": [
                    "Full-text indexing",
                    "B-tree indexing",
                    "Hash indexing",
                    "Bitmap indexing"
                ],
                "correctAnswer": 0,
                "explanation": "Full-text indexing is specifically designed for searching text content efficiently. It creates special data structures that enable fast searching of words and phrases within large text columns, making it ideal for features like search engines and content management systems."
            },
            {
                "question": "What is database denormalization used for?",
                "answers": [
                    "To reduce the number of joins needed in queries",
                    "To increase data redundancy",
                    "To ensure data consistency",
                    "To normalize data"
                ],
                "correctAnswer": 0,
                "explanation": "Denormalization is used to reduce the number of joins needed in queries by intentionally introducing some data redundancy. While this can make updates more complex, it can significantly improve read performance by reducing the need for expensive join operations."
            },
            {
                "question": "Which of the following strategies is useful for improving the performance of complex queries?",
                "answers": [
                    "Query caching",
                    "Database partitioning",
                    "Using prepared statements",
                    "All of the above"
                ],
                "correctAnswer": 3,
                "explanation": "All these strategies contribute to better query performance. Query caching stores results for reuse, partitioning divides data into manageable chunks, and prepared statements reduce parsing overhead and help prevent SQL injection. Together, they form a comprehensive approach to query optimization."
            },
            {
                "question": "Which type of database index is best suited for searching large numeric data sets?",
                "answers": [
                    "B-tree index",
                    "Hash index",
                    "Full-text index",
                    "Bitmap index"
                ],
                "correctAnswer": 0,
                "explanation": "B-tree indexes are ideal for numeric data sets as they maintain sorted data and allow for efficient range queries. They provide good performance for both equality searches and range queries, making them the standard choice for indexing numeric columns."
            },
            {
                "question": "Which of the following methods can improve the performance of SELECT queries?",
                "answers": [
                    "Using LIMIT to reduce the number of rows retrieved",
                    "Using GROUP BY",
                    "Using subqueries",
                    "Using nested joins"
                ],
                "correctAnswer": 0,
                "explanation": "Using LIMIT helps improve query performance by restricting the number of rows returned, reducing both memory usage and processing time. This is particularly useful in pagination scenarios where only a subset of results is needed."
            },
            {
                "question": "Which of the following is a technique used to handle large amounts of data in a distributed database system?",
                "answers": [
                    "Sharding",
                    "Caching",
                    "Replication",
                    "Partitioning"
                ],
                "correctAnswer": 0,
                "explanation": "Sharding is a specific type of partitioning where data is distributed across multiple servers. Each shard contains a subset of the data, allowing the database to handle larger datasets and higher throughput by distributing the load across multiple machines."
            },
            {
                "question": "What is the impact of using too many indexes in a database?",
                "answers": [
                    "It can slow down write operations",
                    "It increases database security",
                    "It improves query performance for all queries",
                    "It reduces the disk space usage"
                ],
                "correctAnswer": 0,
                "explanation": "While indexes speed up read operations, having too many can significantly slow down write operations because each index must be updated when data changes. They also consume additional disk space and memory. It's important to find the right balance based on your application's needs."
            },
            {
                "question": "What is a common method for optimizing database writes?",
                "answers": [
                    "Batching write operations",
                    "Using cache only for writes",
                    "Performing writes during peak hours",
                    "Increasing the number of indexes on write-heavy tables"
                ],
                "correctAnswer": 0,
                "explanation": "Batching write operations improves performance by reducing the number of separate database transactions and disk I/O operations. Instead of writing records one at a time, multiple records are grouped together and written in a single transaction, reducing overhead."
            }
        ]
    }
]